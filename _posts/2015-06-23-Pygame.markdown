---
layout: post
title:  "Party with Pygame"
date:   2015-06-23 17:32:40
image: /assets/party.png
categories: jekyll update
---
<img src="{{ page.image }}">
Gece uykusu kaçınca ne yapar insan?Tabiki Pygame ile party yapar. Pygame Python'un oyun kütüphanesi. Şuradan inceleyebilirsiniz. Pygame ile yapılmış oyunlardaki kodları okurken bazılarını kendi sahneme ekleyerek açıklamak istedim. Örneğin rotate ve ışıkların sürekli yanıp sönmesi için gereken kodu bir pygame uygulamasından aldım. Mantığını kavrayıp anlatmaya çalıştım. Kodun tamamı burada

Şimdi burada normal bir pygame oyunu oluştururken gerekli olan kodlara değinmeme gerek yoktur herhalde. Ben sadece hareket içeren parçalardan bahsedeyim. Müzik notasının kodu şu şekilde: Öncelikle müzik notamız için Surface alanı oluşturuyoruz. İşlemlerimiz bu surface nesnesi üzerinde yapılacak.
{% highlight ruby %}
musicnota = pygame.Surface((850, 550)).convert_alpha()
musicnota.fill((0, 0, 0, 0))
{% endhighlight %}
Daha sonra istediğimiz anda ortaya çıkması için müzik notasını çizen bir fonksiyon oluştururuz.
def draw_a_light(surface, pos):
	global lights
	render_light(surface, pos)
	lights.append(pos)
draw_a_light(background, (30, 20))
draw_a_light(background, (130, 20))
draw_a_light(background, (230, 20))
draw_a_light(background, (330, 20))
draw_a_light(background, (430, 20))
draw_a_light(background, (530, 20))
draw_a_light(background, (630, 20))
draw_a_light(background, (730, 20))
draw_a_light(background, (830, 20))
#musicnota
{% endhighlight %}
Müzik notasının hareket etmesi için blit kodunu kullanırken y koordinatının hareketli olması için değişken kullanırız.
{% highlight ruby %}
 screen.blit(musicnota, (0, y))
{% endhighlight %}

Müzik notamızın belirtilen yüksekliğe çıkarak tekrar başa dönmesi için yazılan kod:

{% highlight ruby %}
if y == -300:
	y = 10
	y -= 1
{% endhighlight %}

Şimdi yanıp sönen ışıkları yapalım:

Önce ışıklar için surface nesnesi oluşturalım ve işlemlerimiz burada gerçekleşsin.
{% highlight ruby %}
updatedLights = pygame.Surface((850, 550)).convert_alpha()
updatedLights.fill((255, 0, 0, 0))
{% endhighlight %}

Verilen surface nesnesi ve pozisyonu parametre olarak alıp ışık çizen bir fonksiyon oluşturalım.

{% highlight ruby %}
lights = []
def render_light(surface, pos):
	pygame.draw.circle(surface, pygame.color.THECOLORS[random.choice(
	pygame.color.THECOLORS.keys())], pos, 6)
{% endhighlight %}

Şimdi kaç tane ışık çizeceksek o kadar sayıda çağıracağımız fonksiyonu oluşturalım.

{% highlight ruby %}
def draw_a_light(surface, pos):
	global lights
	render_light(surface, pos)
	lights.append(pos)
draw_a_light(background, (30, 20))
draw_a_light(background, (130, 20))
draw_a_light(background, (230, 20))
draw_a_light(background, (330, 20))
draw_a_light(background, (430, 20))
draw_a_light(background, (530, 20))
draw_a_light(background, (630, 20))
draw_a_light(background, (730, 20))
draw_a_light(background, (830, 20))
{% endhighlight %}

Daha sonra bu ışıkların renginin sürekli değişmesi için render_light fonksiyonunu verilen pozisyonlarda çağıran fonksiyonu oluşturalım.

{% highlight ruby %}
def update_lights():
	global updatedLights, lights
	for i in lights:
		render_light(updatedLights, i)

{% endhighlight %}

Son olarak while true: döngüsünün içinde update_ligths() fonksiyonun sürekli çağrılmasını sağlayalım.

Party çocuklarının kollarının nasıl döndüğünü açıklayalım: Öncelikle kol ve biranın çizileceği alan için bir surface nesnesi oluşturuyoruz. Daha sonra bu surface nesnesini kullanarak kol ve birayı çiziyoruz. Arm1Area isminde bir Rect nesnesi oluşturuyoruz.

{% highlight ruby %}
Arm1 = pygame.Surface((850, 550)).convert_alpha()
Arm1.fill((0, 0, 0, 0))
#rigtharm
pygame.draw.line(Arm1, (0, 0, 0), (180, 310), (240, 310), 10)
#beer
pygame.draw.polygon(Arm1, (73, 23, 0), ((
230, 320), (230, 300), (220, 300), (220, 320)))
pygame.draw.polygon(Arm1, (73, 23, 0), ((
240, 388), (240, 320), (210, 320), (210, 388)))
Arm1Area = Arm1.subsurface(pygame.Rect((125, 250), (110, 110)))
{% endhighlight %}

Daha sonra kolun dönmesini sağlayan rotate modulunu kullanıyoruz.

{% highlight ruby %}
rotatedArm = pygame.transform.rotate(
Arm1Area, math.sin(counter/5.0)*15)
{% endhighlight %}

Burada neden rotate açısını math.sin(counter/5.0)*15 olarak kodladığını sormak isteyebilirsiniz. 1'den 30'a kadar olan sayıların sin değerini yazdırırsanız - ve + sayıların ard arda geldiğini göreceksiniz. Kolun bir yukarı bir aşağı hareket etmesi için döndürme yönü - ve + olmalıdır. Kolun koordinatlarını alarak her zaman aynı merkezde kalmasını sağlıyoruz.

{% highlight ruby %}
rotArmRect = rotatedArm.get_rect()
rotArmRect.center = (154, 295)
screen.blit(rotatedArm, rotArmRect)
{% endhighlight %}
